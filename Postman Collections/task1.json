{
	"info": {
		"_postman_id": "55c59c9b-6975-473d-96b7-801479f627cb",
		"name": "Proxima AI Quiz",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Book 1 - A Game of Thrones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2572aaf3-6a90-42c0-8466-d90f9ee4cb8c",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the URL contains the correct book number\", function () {\r",
									"    pm.expect(responseBody.url).to.contain(\"/books/1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the book name has correct value and type\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a('string');\r",
									"    pm.expect(responseBody.name).to.eq(\"A Game of Thrones\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the ISBN number has correct format, value and type\", function () {\r",
									"    pm.expect(responseBody.isbn).to.match(/\\d{3}-\\d{10}/);\r",
									"    pm.expect(responseBody.isbn).to.be.a('string');\r",
									"    pm.expect(responseBody.isbn).to.eq(\"978-0553103540\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the author name has correct type and value\", function () {\r",
									"    pm.expect(responseBody.authors[0]).to.be.a('string');\r",
									"    pm.expect(responseBody.authors[0]).to.eq(\"George R. R. Martin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the number of pages has the correct type and value\", function() {\r",
									"    pm.expect(responseBody.numberOfPages).to.be.a('number');\r",
									"    pm.expect(responseBody.numberOfPages).to.eq(694);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the publisher has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.publisher).to.be.a('string');\r",
									"     pm.expect(responseBody.publisher).to.eq(\"Bantam Books\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the country has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.country).to.be.a('string');\r",
									"     pm.expect(responseBody.country).to.eq(\"United States\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the media type has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.mediaType).to.be.a('string');\r",
									"     pm.expect(responseBody.mediaType).to.eq(\"Hardcover\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the release has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.released).to.be.a('string');\r",
									"     pm.expect(responseBody.released).to.eq(\"1996-08-01T00:00:00\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the characters has the correct count and contains character 2\", function () {\r",
									"     pm.expect(responseBody.characters.length).to.eq(434);\r",
									"     pm.expect(responseBody.characters[0]).to.eq(\"https://www.anapioficeandfire.com/api/characters/2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the povCharacters has the correct count and contains character 148\", function () {\r",
									"     pm.expect(responseBody.povCharacters.length).to.eq(9);\r",
									"     pm.expect(responseBody.povCharacters[0]).to.eq(\"https://www.anapioficeandfire.com/api/characters/148\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b8dd0c2-19f0-48e9-aa53-7723cf9dc0b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/books/1"
					},
					"response": []
				},
				{
					"name": "Book 2 - A Clash of Kings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e11a919-6dd3-4f53-9a66-8c84f31686e3",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the URL contains the correct book number\", function () {\r",
									"    pm.expect(responseBody.url).to.contain(\"/books/2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the book name has correct value and type\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a('string');\r",
									"    pm.expect(responseBody.name).to.eq(\"A Clash of Kings\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the ISBN number has correct format, value and type\", function () {\r",
									"    pm.expect(responseBody.isbn).to.match(/\\d{3}-\\d{10}/);\r",
									"    pm.expect(responseBody.isbn).to.be.a('string');\r",
									"    pm.expect(responseBody.isbn).to.eq(\"978-0553108033\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the author name has correct type and value\", function () {\r",
									"    pm.expect(responseBody.authors[0]).to.be.a('string');\r",
									"    pm.expect(responseBody.authors[0]).to.eq(\"George R. R. Martin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the number of pages has the correct type and value\", function() {\r",
									"    pm.expect(responseBody.numberOfPages).to.be.a('number');\r",
									"    pm.expect(responseBody.numberOfPages).to.eq(768);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the publisher has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.publisher).to.be.a('string');\r",
									"     pm.expect(responseBody.publisher).to.eq(\"Bantam Books\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the country has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.country).to.be.a('string');\r",
									"     pm.expect(responseBody.country).to.eq(\"United States\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the media type has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.mediaType).to.be.a('string');\r",
									"     pm.expect(responseBody.mediaType).to.eq(\"Hardback\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the release has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.released).to.be.a('string');\r",
									"     pm.expect(responseBody.released).to.eq(\"1999-02-02T00:00:00\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the characters has the correct count and contains character 2\", function () {\r",
									"     pm.expect(responseBody.characters.length).to.eq(778);\r",
									"     pm.expect(responseBody.characters[0]).to.eq(\"https://www.anapioficeandfire.com/api/characters/2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the povCharacters has the correct count and contains character 148\", function () {\r",
									"     pm.expect(responseBody.povCharacters.length).to.eq(10);\r",
									"     pm.expect(responseBody.povCharacters[0]).to.eq(\"https://www.anapioficeandfire.com/api/characters/148\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "da988151-1e43-4825-842e-5e757c57d6e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/books/2"
					},
					"response": []
				},
				{
					"name": "Book 3 - A Storm of Swords",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b742df7c-e364-4794-a9bc-719b46cdc59c",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the URL contains the correct book number\", function () {\r",
									"    pm.expect(responseBody.url).to.contain(\"/books/3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the book name has correct value and type\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a('string');\r",
									"    pm.expect(responseBody.name).to.eq(\"A Storm of Swords\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the ISBN number has correct format, value and type\", function () {\r",
									"    pm.expect(responseBody.isbn).to.match(/\\d{3}-\\d{10}/);\r",
									"    pm.expect(responseBody.isbn).to.be.a('string');\r",
									"    pm.expect(responseBody.isbn).to.eq(\"978-0553106633\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the author name has correct type and value\", function () {\r",
									"    pm.expect(responseBody.authors[0]).to.be.a('string');\r",
									"    pm.expect(responseBody.authors[0]).to.eq(\"George R. R. Martin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the number of pages has the correct type and value\", function() {\r",
									"    pm.expect(responseBody.numberOfPages).to.be.a('number');\r",
									"    pm.expect(responseBody.numberOfPages).to.eq(992);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the publisher has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.publisher).to.be.a('string');\r",
									"     pm.expect(responseBody.publisher).to.eq(\"Bantam Books\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the country has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.country).to.be.a('string');\r",
									"     pm.expect(responseBody.country).to.eq(\"United States\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the media type has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.mediaType).to.be.a('string');\r",
									"     pm.expect(responseBody.mediaType).to.eq(\"Hardcover\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the release has the correct type and value\", function () {\r",
									"     pm.expect(responseBody.released).to.be.a('string');\r",
									"     pm.expect(responseBody.released).to.eq(\"2000-10-31T00:00:00\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the characters has the correct count and contains character 2\", function () {\r",
									"     pm.expect(responseBody.characters.length).to.eq(1021);\r",
									"     pm.expect(responseBody.characters[0]).to.eq(\"https://www.anapioficeandfire.com/api/characters/2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the povCharacters has the correct count and contains character 148\", function () {\r",
									"     pm.expect(responseBody.povCharacters.length).to.eq(12);\r",
									"     pm.expect(responseBody.povCharacters[0]).to.eq(\"https://www.anapioficeandfire.com/api/characters/148\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "747844ce-dccf-4078-869a-5c6e0189f251",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/books/3"
					},
					"response": []
				},
				{
					"name": "Non-existent book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eb1e5e0-8fb4-4014-839c-42dfe17fc64c",
								"exec": [
									"pm.test(\"Verify that status is 404 - not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "10e2f6bc-867b-467a-b939-fd5ed5fa4c49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/books/99999"
					},
					"response": []
				}
			],
			"id": "086291a3-829b-45f2-bb46-85428d08493f",
			"description": "Tests for: [https://www.anapioficeandfire.com/api/books](https://www.anapioficeandfire.com/api/books)"
		},
		{
			"name": "Characters",
			"item": [
				{
					"name": "Character 583 - Jon Snow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c75c1db-3f46-43b3-804d-723a4a7e2c41",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var aliases = [\r",
									"        \"Lord Snow\",\r",
									"        \"Ned Stark's Bastard\",\r",
									"        \"The Snow of Winterfell\",\r",
									"        \"The Crow-Come-Over\",\r",
									"        \"The 998th Lord Commander of the Night's Watch\",\r",
									"        \"The Bastard of Winterfell\",\r",
									"        \"The Black Bastard of the Wall\",\r",
									"        \"Lord Crow\"\r",
									"    ];\r",
									"\r",
									"var tvSeasonsAppearedIn = [\r",
									"        \"Season 1\",\r",
									"        \"Season 2\",\r",
									"        \"Season 3\",\r",
									"        \"Season 4\",\r",
									"        \"Season 5\",\r",
									"        \"Season 6\"\r",
									"    ];\r",
									"\r",
									"pm.test(\"Verify that status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the URL contains the correct character number\", function () {\r",
									"    pm.expect(responseBody.url).to.contain(\"/characters/583\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character name has correct value and type\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a('string');\r",
									"    pm.expect(responseBody.name).to.eq(\"Jon Snow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character gender has correct value and type\", function () {\r",
									"    pm.expect(responseBody.gender).to.be.a('string');\r",
									"    pm.expect(responseBody.gender).to.eq(\"Male\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character date of birth has correct value and type\", function () {\r",
									"    pm.expect(responseBody.born).to.be.a('string');\r",
									"    pm.expect(responseBody.born).to.eq(\"In 283 AC\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character date of death has correct value and type\", function () {\r",
									"    pm.expect(responseBody.died).to.be.a('string');\r",
									"    pm.expect(responseBody.died).to.eq(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character titles has correct number of values and type\", function () {\r",
									"    pm.expect(responseBody.titles).to.be.a('array');\r",
									"    pm.expect(responseBody.titles.length).to.eq(1);\r",
									"    pm.expect(responseBody.titles[0]).to.eq(\"Lord Commander of the Night's Watch\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's aliases to have correct values and type\", function () {\r",
									"    pm.expect(responseBody.aliases).to.be.a('array');\r",
									"    pm.expect(responseBody.aliases).to.deep.eq(aliases);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's father to have correct value and type\", function () {\r",
									"    pm.expect(responseBody.father).to.be.a('string');\r",
									"    pm.expect(responseBody.father).to.eq(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's mother to have correct value and type\", function () {\r",
									"    pm.expect(responseBody.father).to.be.a('string');\r",
									"    pm.expect(responseBody.mother).to.eq(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's spouse to have correct value and type\", function () {\r",
									"    pm.expect(responseBody.father).to.be.a('string');\r",
									"    pm.expect(responseBody.spouse).to.eq(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's allegiance to have correct values and type\", function () {\r",
									"    pm.expect(responseBody.allegiances).to.be.a('array');\r",
									"    pm.expect(responseBody.allegiances.length).to.eq(1);\r",
									"    pm.expect(responseBody.allegiances[0]).to.contain(\"/362\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's book appearance to have correct values and type\", function () {\r",
									"    pm.expect(responseBody.books).to.be.a('array');\r",
									"    pm.expect(responseBody.books.length).to.eq(1);\r",
									"    pm.expect(responseBody.books[0]).to.contain(\"/5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's povBook appearance to have correct values and type\", function () {\r",
									"    pm.expect(responseBody.povBooks).to.be.a('array');\r",
									"    pm.expect(responseBody.povBooks.length).to.eq(4);\r",
									"    pm.expect(responseBody.povBooks[0]).to.contain(\"/1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's tv appearance to have correct values and type\", function () {\r",
									"    pm.expect(responseBody.tvSeries).to.be.a('array');\r",
									"    pm.expect(responseBody.tvSeries).to.deep.eq(tvSeasonsAppearedIn);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the character's tv played by to have correct values and type\", function () {\r",
									"    pm.expect(responseBody.playedBy).to.be.a('array');\r",
									"    pm.expect(responseBody.playedBy[0]).to.eq(\"Kit Harington\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d1f37fb8-f2d9-47f8-a593-1cefcfae5a8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/characters/583"
					},
					"response": []
				},
				{
					"name": "Pagination - Greater than 50 per page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e52fcc6-9711-4c55-b95a-955ea2b30532",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if response body is an array of objects\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array').that.is.not.empty;\r",
									"    responseBody.forEach((character) => {\r",
									"        pm.expect(character).to.be.an('object');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response body has correct number of characters\", function () {\r",
									"    pm.expect(responseBody.length).to.eq(50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b7379a3-28af-41c9-93d0-542080e91aec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/characters?page=2&pageSize=51",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"characters"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination - Less than 50 per page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e52fcc6-9711-4c55-b95a-955ea2b30532",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if response body is an array of objects\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array').that.is.not.empty;\r",
									"    responseBody.forEach((character) => {\r",
									"        pm.expect(character).to.be.an('object');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response body has correct number of characters\", function () {\r",
									"    pm.expect(responseBody.length).to.eq(49);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b199f291-1b48-4fc3-b637-be2f80c36f63",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/characters?page=2&pageSize=49",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"characters"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "49"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-existent character",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eb1e5e0-8fb4-4014-839c-42dfe17fc64c",
								"exec": [
									"pm.test(\"Verify that status is 404 - not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e91e82b-b3a2-4240-a6e7-56f158b92d98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/characters/99999"
					},
					"response": []
				}
			],
			"id": "23060595-96cf-4eee-a00d-4fb03c232273",
			"description": "Tests for [https://www.anapioficeandfire.com/api/characters](https://www.anapioficeandfire.com/api/books)"
		},
		{
			"name": "Houses",
			"item": [
				{
					"name": "House 362 - House Stark of Winterfell",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a017db8f-e9a9-4599-a438-ecde936853ca",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var titles = [\r",
									"        \"King in the North\",\r",
									"        \"Lord of Winterfell\",\r",
									"        \"Warden of the North\",\r",
									"        \"King of the Trident\"\r",
									"    ];\r",
									"\r",
									"pm.test(\"Verify that status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the URL contains the correct house number\", function () {\r",
									"    pm.expect(responseBody.url).to.contain(\"/houses/362\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house name has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a('string');\r",
									"    pm.expect(responseBody.name).to.eq(\"House Stark of Winterfell\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house name has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a('string');\r",
									"    pm.expect(responseBody.name).to.eq(\"House Stark of Winterfell\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house region has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.region).to.be.a('string');\r",
									"    pm.expect(responseBody.region).to.eq(\"The North\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house coat of arms has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.coatOfArms).to.be.a('string');\r",
									"    pm.expect(responseBody.coatOfArms).to.eq(\"A running grey direwolf, on an ice-white field\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house words has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.words).to.be.a('string');\r",
									"    pm.expect(responseBody.words).to.eq(\"Winter is Coming\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house titles has the correct type and values\", function () {\r",
									"    pm.expect(responseBody.titles).to.be.a('array');\r",
									"    pm.expect(responseBody.titles).to.deep.eq(titles);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house seats has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.seats).to.be.a('array');\r",
									"    pm.expect(responseBody.seats[0]).to.eq(\"Scattered (formerly Winterfell)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house current lord has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.currentLord).to.be.a('string');\r",
									"    pm.expect(responseBody.currentLord).to.eq(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house overlord has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.overlord).to.be.a('string');\r",
									"    pm.expect(responseBody.overlord).to.contain(\"/houses/16\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house founded in has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.founded).to.be.a('string');\r",
									"    pm.expect(responseBody.founded).to.eq(\"Age of Heroes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house founder has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.founder).to.be.a('string');\r",
									"    pm.expect(responseBody.founder).to.contain(\"/characters/209\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house diedOut has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.diedOut).to.be.a('string');\r",
									"    pm.expect(responseBody.diedOut).to.eq(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house ancestral weapon has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.ancestralWeapons).to.be.a('array');\r",
									"    pm.expect(responseBody.ancestralWeapons[0]).to.eq(\"Ice\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house cadet branches has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.cadetBranches).to.be.a('array');\r",
									"    pm.expect(responseBody.cadetBranches.length).to.eq(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the house sworn members has the correct type and value\", function () {\r",
									"    pm.expect(responseBody.swornMembers).to.be.a('array');\r",
									"    pm.expect(responseBody.swornMembers.length).to.eq(88);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d5526321-dd79-47ab-8b01-ae33d6531a2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/houses/362"
					},
					"response": []
				},
				{
					"name": "Non-existent house",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eb1e5e0-8fb4-4014-839c-42dfe17fc64c",
								"exec": [
									"pm.test(\"Verify that status is 404 - not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "324919e0-48fb-42b9-a8ac-561d0812df4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/houses/99999"
					},
					"response": []
				}
			],
			"id": "82a91c81-1dc9-4300-ab4d-daa7af8c7164",
			"description": "Tests for [https://www.anapioficeandfire.com/api/houses](https://www.anapioficeandfire.com/api/books)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2d97c06f-8e43-46e9-872d-0b90481e1a19",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f7620db0-ae91-4596-9f47-723a93f6c60c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "https://www.anapioficeandfire.com/api",
			"type": "string"
		}
	]
}